import React, { useState, useEffect } from 'react';

function AuthForm({ formType, onSubmit, onSwitchForm }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [name, setName] = useState(''); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏
  const [error, setError] = useState('');
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [confirmPasswordVisible, setConfirmPasswordVisible] = useState(false);
  const [passwordTouched, setPasswordTouched] = useState(false); // –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è

  const handleSubmit = (e) => {
    e.preventDefault();

    if (formType === 'register') {
      if (!name) {
        setError('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        return;
      }

      if (password !== confirmPassword) {
        setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        return;
      }

      if (!isPasswordValid(password)) {
        setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');
        return;
      }

      if (password === confirmPassword) {
        setError('');
      }
    }

    onSubmit({ name, email, password }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –≤–º–µ—Å—Ç–µ —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  };

  const isPasswordValid = (password) => {
    const passwordRegex = /^(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,}$/; // –£–±—Ä–∞–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    return passwordRegex.test(password);
  };

  const getPasswordStrength = () => {
    const hasUpperCase = /[A-Z]/.test(password);
    const hasNumber = /\d/.test(password);
    const isValidLength = password.length >= 8;

    return {
      hasUpperCase,
      hasNumber,
      isValidLength,
    };
  };

  const passwordStrength = getPasswordStrength();

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å
  useEffect(() => {
    if (password) {
      setPasswordTouched(true);
    } else {
      setPasswordTouched(false);
    }
  }, [password]);

  return (
    <div className={formType === 'login' ? 'login-form' : 'register-form'}>
      <h2>{formType === 'login' ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        {formType === 'register' && (
          <div className="form-group">
            <label htmlFor="name">–ò–º—è</label>
            <input
              type="text"
              id="name"
              name="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
        )}
        <div className="form-group">
          <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
          <div className="password-container">
            <input
              type={passwordVisible ? 'text' : 'password'}
              id="password"
              name="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <button
              type="button"
              className="toggle-password"
              onClick={() => setPasswordVisible(!passwordVisible)}
            >
              {passwordVisible ? 'üôà' : 'üëÅÔ∏è'} {/* –ò–∫–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è */}
            </button>
          </div>

          {/* –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –±—ã–ª –≤–≤–µ–¥–µ–Ω –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
          {formType === 'register' && passwordTouched && (
            <div className="password-info">
              {!passwordStrength.isValidLength && <p>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.</p>}
              {!passwordStrength.hasUpperCase && <p>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É.</p>}
              {!passwordStrength.hasNumber && <p>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.</p>}
            </div>
          )}
        </div>
        {formType === 'register' && (
          <div className="form-group">
            <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
            <div className="password-container">
              <input
                type={confirmPasswordVisible ? 'text' : 'password'}
                id="confirmPassword"
                name="confirmPassword"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
              <button
                type="button"
                className="toggle-password"
                onClick={() => setConfirmPasswordVisible(!confirmPasswordVisible)}
              >
                {confirmPasswordVisible ? 'üôà' : 'üëÅÔ∏è'} {/* –ò–∫–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è */}
              </button>
            </div>
          </div>
        )}
        {error && <p className="error-message">{error}</p>}
        <button type="submit" className='btn_log_reg btn-log'>{formType === 'login' ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}</button>
      </form>
      <p>
        {formType === 'login'
          ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?'
          : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'}{' '}
        <button onClick={onSwitchForm} className='btn_log_reg btn-reg'>
          {formType === 'login' ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'}
        </button>
      </p>
    </div>
  );
}

export default AuthForm;

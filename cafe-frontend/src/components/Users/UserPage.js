import React, { useState, useEffect } from "react";
import "./UserPage.css";
import { useNavigate } from "react-router-dom";

function UserPage({ name, email, userId, onLogout }) {
  const navigate = useNavigate();
  const [isEditing, setIsEditing] = useState(false);
  const [nameInput, setNameInput] = useState(name || "");
  const [emailInput, setEmailInput] = useState(email || "");
  const [role, setRole] = useState(localStorage.getItem("role") || "User");

  // --- –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è ---
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [confirmPasswordVisible, setConfirmPasswordVisible] = useState(false);
  const [passwordTouched, setPasswordTouched] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
  const isPasswordValid = (password) => {
    const passwordRegex = /^(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,}$/;
    return passwordRegex.test(password);
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
  const getPasswordStrength = () => {
    return {
      hasUpperCase: /[A-Z]/.test(newPassword),
      hasNumber: /\d/.test(newPassword),
      isValidLength: newPassword.length >= 8,
    };
  };

  const passwordStrength = getPasswordStrength();

  useEffect(() => {
    setPasswordTouched(newPassword.length > 0);
  }, [newPassword]);

  // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–æ–ª–∏
  useEffect(() => {
    const handleKeyCombo = (e) => {
      if (e.ctrlKey && e.altKey && e.key.toLowerCase() === "a") {
        const currentRole = localStorage.getItem("role");
        const newRole = currentRole === "Admin" ? "User" : "Admin";
        localStorage.setItem("role", newRole);
        setRole(newRole);
        alert(
          `–†–µ–∂–∏–º ${
            newRole === "Admin" ? "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          } –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`
        );
      }
    };

    window.addEventListener("keydown", handleKeyCombo);
    return () => window.removeEventListener("keydown", handleKeyCombo);
  }, []);

  const handleEditSubmit = async (e) => {
    e.preventDefault();

    if (!userId || isNaN(userId)) {
      alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      return;
    }

    try {
      const response = await fetch("http://localhost:5189/api/users/update", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: userId,
          name: nameInput,
          email: emailInput,
        }),
      });

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è");
      }

      alert("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω");
      const updatedUser = { name: nameInput, email: emailInput, userId };
      localStorage.setItem("user", JSON.stringify(updatedUser));

      setIsEditing(false);
      window.location.reload();
    } catch (error) {
      console.error(error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
    }
  };

  const handleDeleteAccount = async () => {
    if (!userId || isNaN(userId)) {
      alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      return;
    }

    if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?")) return;

    try {
      const response = await fetch(`http://localhost:5189/api/users/${userId}`, {
        method: "DELETE",
      });

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞");
      }

      alert("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω");

      localStorage.clear();
      onLogout();
    } catch (error) {
      console.error(error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç");
    }
  };

const handleChangePasswordSubmit = async (e) => {
  e.preventDefault();

  const oldPassword = localStorage.getItem("password") || "";

  if (newPassword === oldPassword) {
    setError("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –ø–∞—Ä–æ–ª–µ–º");
    return;
  }

  if (newPassword !== confirmPassword) {
    setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
    return;
  }

  if (!isPasswordValid(newPassword)) {
    setError(
      "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã"
    );
    return;
  }

  setError("");

  try {
    const response = await fetch("http://localhost:5189/api/users/change-password", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId: userId,
        newPassword: newPassword,
      }),
    });

    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è");

    alert("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω");
    setNewPassword("");
    setConfirmPassword("");
    setIsChangingPassword(false);
  } catch (error) {
    console.error(error);
    setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å");
  }
};


  return (
    <div className="user-page">
      <header className="user-header">
        <div className="user-info">
          {isEditing ? (
            <form onSubmit={handleEditSubmit}>
              <input
                type="text"
                value={nameInput}
                onChange={(e) => setNameInput(e.target.value)}
                placeholder="–ò–º—è"
                required
              />
              <input
                type="email"
                value={emailInput}
                onChange={(e) => setEmailInput(e.target.value)}
                placeholder="Email"
                required
              />
              <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
              <button type="button" onClick={() => setIsEditing(false)}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </form>
          ) : (
            <>
              <h1>{nameInput}</h1>
              <p className="user-email">{emailInput}</p>
              <p className="user-role">–†–æ–ª—å: {role}</p>
              <p className="user-joined">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: 14 –º–∞—è 2025</p>
            </>
          )}
        </div>
        <button className="logout-button" onClick={onLogout}>
          –í—ã–π—Ç–∏
        </button>
      </header>

      <section className="user-actions">
        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        <ul>
          <li>
            <button onClick={() => setIsEditing(true)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
          </li>
          <li>
            {isChangingPassword && (
              <form onSubmit={handleChangePasswordSubmit} className="change-password-form">
                <div className="form-group">
                  <label htmlFor="newPassword">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                  <div className="password-container">
                    <input
                      type={passwordVisible ? "text" : "password"}
                      id="newPassword"
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      required
                    />
                    <button
                      type="button"
                      className="toggle-password"
                      onClick={() => setPasswordVisible(!passwordVisible)}
                      tabIndex={-1}
                    >
                      {passwordVisible ? "üôà" : "üëÅÔ∏è"}
                    </button>
                  </div>

                  {passwordTouched && (
                    <div className="password-info">
                      {!passwordStrength.isValidLength && (
                        <p>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤.</p>
                      )}
                      {!passwordStrength.hasUpperCase && (
                        <p>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É.</p>
                      )}
                      {!passwordStrength.hasNumber && (
                        <p>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.</p>
                      )}
                    </div>
                  )}
                </div>

                <div className="form-group">
                  <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                  <div className="password-container">
                    <input
                      type={confirmPasswordVisible ? "text" : "password"}
                      id="confirmPassword"
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      required
                    />
                    <button
                      type="button"
                      className="toggle-password"
                      onClick={() => setConfirmPasswordVisible(!confirmPasswordVisible)}
                      tabIndex={-1}
                    >
                      {confirmPasswordVisible ? "üôà" : "üëÅÔ∏è"}
                    </button>
                  </div>
                </div>

                {error && <p className="error-message">{error}</p>}

                <button type="submit">–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>
                <button type="button" onClick={() => setIsChangingPassword(false)}>
                  –û—Ç–º–µ–Ω–∞
                </button>
              </form>
            )}

            {!isChangingPassword && (
              <button onClick={() => setIsChangingPassword(true)}>–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>
            )}
          </li>
          <li>
            <button
              onClick={handleDeleteAccount}
              style={{ backgroundColor: "#ff4d4f" }}
            >
              –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </button>
          </li>
          {role === "Admin" && (
            <li>
              <button
                onClick={() => navigate("/admin")}
                style={{ backgroundColor: "#0f3739" }}
              >
                –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
              </button>
            </li>
          )}
        </ul>
      </section>

<section className="user-history">
  <h3>–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π</h3>

  <div>
    {role === "Admin" ? (
      <button onClick={() => navigate("/admin/orders")}>
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
      </button>
    ) : (
      <button onClick={() => navigate("/order-history")}>
        –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
      </button>
    )}
  </div>

  <div>
    {role === "Admin" ? (
      <button onClick={() => navigate("/admin/bookings")}>
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω—å—é
      </button>
    ) : (
      <button onClick={() => navigate("/bookinghistory")}>
        –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏
      </button>
    )}
  </div>
</section>


    </div>
  );
}

export default UserPage;
